#!/usr/bin/env bash

################################################################################
#
#    con-test
#    Copyright (C) 2018  Stefan Venz
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
################################################################################


set -o pipefail -o noclobber

# import common funcitons and variables
source ./commons

VERBOSE=n

LOG_PATH="con-test_logs"

SUDO=''

# check dependencies on wifi nodes
#
check_remote_deps()
{
	printf "${INFO} Checking dependencies on ${SERVER_IP}"

	printf "${INFO} Checking dependencies on ${CLIENT_IP}"
}

# start iperf server
#
# Arguments:
# run - number of current test, starting with 1
# side - where to start iperf:  0 for client, 1 for server
#
start_iperf()
{
	run="$1"
	side=$2

	auth=$(chack_auth $side)

	# set parameter for client or server
	if (( $side == $CLIENT )); then
		log_name="con-test-client-run-${run}-$(date +%F-%H-%M-%S).log"
		ip=$CLIENT_IP
		user=$CLIENT_USER
		param="-c"
		if [ -n "${IPERF_PARAM_CLIENT[${run} - 1]}" ]; then
			param="${IPERF_PARAM_CLIENT[${run} - 1]} $param"
		fi

		if (( $auth == 0 )); then
			passwd=$CLIENT_PASSWORD
		else
			cert=$CLIENT_CERTIFICATE
		fi

	else
		log_name="con-test-server-run-${run}-$(date +%F-%H-%M-%S).log"
		ip=$SERVER_IP
		user=$SERVER_USER
		param="-s"
		if [ -n "${IPERF_PARAM_SERVER[${run} - 1]}" ]; then
			param="${param} ${IPERF_PARAM_SERVER[${run} - 1]}"
		fi
		if (( $auth == 0 )); then
			passwd=$SERVER_PASSWORD
		else
			cert=$SERVER_CERTIFICATE
		fi
	fi

	echo "Attenuation parameter: ${ATTENUATOR_PARAMS[${run} - 1]}" > \
							${LOG_PATH}/${log_name}
	echo "Iperf parameter: ${param}" >> ${LOG_PATH}/${log_name}

	# use cert or password for authentication
	if (( $auth == $CLIENT )); then
		iperf_pid=$(sshpass -p "$passwd" \
			    ssh ${user}@${ip} "ps" \
			    | awk '/[i]perf/{ print $1 }')
		if [ -n "$iperf_pid" ]; then
			ret=$(sshpass -p "$passwd" \
			      ssh ${user}@${ip} \
			      "kill -9 $iperf_pid")
			check_ret_val "$?" "Could not kill iperf: $iperf_pid - $ret"
		fi

		ret=$(nohup sshpass -p "$passwd" \
		      ssh ${user}@${ip} \
		      "iperf3 $param" >> ${LOG_PATH}/${log_name} &)
		check_ret_val $? "Failed to start iperf with ${param} on ${ip}: $ret"
	else
		iperf_pid=$(ssh -i $cert \
			    ${user}@${ip} "ps" \
			    | awk '/[i]perf/{ print $1 }')
		if [ -n "$iperf_pid" ]; then
			ret=$(ssh -i $cert \
			      ${user}@${ip} "kill -9 $iperf_pid")
			check_ret_val "$?" "Could not kill iperf: $iperf_pid - $ret"
		fi

		ret=$(ssh -i $cert \
		      ${user}@${ip} \
		      "iperf3 $param" >> ${LOG_PATH}/${log_name} &)
		check_ret_val $? "Failed to start iperf with ${param}on ${ip}: $ret"
	fi
}

# start attenuators, get the attenuation up
#
# Arguments:
# params - parameters for the attenuator programm
#
start_antennuator()
{
	params="$@"
	$SUDO /usr/local/bin/attenuator_lab_brick $params
	check_ret_val $? "Could not start the attenuation programm"
}

# copy package to device and update it
#
# Arguments:
# u_name - user name on remote host
# ip - update package on this host
# path - path to package on current host include package name
# key - path to identity file
#
update_package()
{
	u_name="${PARAMS[0]}"
	ip="${PARAMS[1]}"
	path="${PARAMS[2]}"
	pw="${PARAMS[3]}"
	key="${PARAMS[4]}"

	if [ ! -f "$path" ]; then
		printf "${ERROR} ${path} does not exist or cannot be accessed"
		return $FAILURE
	fi

	pkg_name=$(basename "$path")
	if [ -n "$key" ]; then
		scp -i $key ${path} ${u_name}@${ip}:/tmp/
		check_ret_val $? "Failed to copy $pkg_name to $ip"

		ssh -i $key ${u_name}@${ip} "opkg update" 1>/dev/null 2>&1

		ret=$(ssh -i $key ${u_name}@${ip} \
		      "opkg remove --force-depends $pkg_name" 1>/dev/null 2>&1)
		check_ret_val $? "ssh on $ip returned $?: Failed to run opkg remove"

		ret=$(ssh -i $key ${u_name}@${ip} \
		      "opkg install --force-reinstall /tmp/${pkg_name}" \
		      1>/dev/null 2>&1)
		check_ret_val $? "ssh on $ip returned $?: Failed to run opkg install"
	elif [ -n "$pw" ]; then
		sshpass -p $pw scp ${path} ${u_name}@${ip}:/tmp/
		check_ret_val $? "Failed to copy $pkg_name to $ip"

		sshpass -p $pw ssh ${u_name}@${ip} "opkg update" \
			1>/dev/null 2>&1

		ret=$(sshpass -p $pw ssh ${u_name}@${ip} \
			"opkg remove --force-depends $pkg_name" \
			1>/dev/null 2>&1)
		check_ret_val $? "ssh on $ip returned $?: Failed to run opkg remove"

		ret=$(sshpass -p $pw ssh ${u_name}@${ip} \
		      "opkg install --force-reinstall /tmp/${pkg_name}" \
		      1>/dev/null 2>&1)
		check_ret_val $? "ssh on $ip returned $?: Failed to run opkg install"
	fi

	return $SUCCESS
}

# print information about this script
#
call_help()
{
	printf "con-test help:\n\n"
	printf "\t -c, --config:\t provide path to conn-test.conf, default ./conn-test.conf \n\n"
	printf "\t -h, --help:\t call this overview\n\n"
	printf "\t -o, --output\t path to log file to store output, default ./conn-test.log \n\n"
	printf "\t -v, --verbose\t output more information during a run\n"
	printf "\t -V, --version\t print con-test version\n"
}

# main function
#
# Arguments:
# args - command line arguments
#
main()
{
	args=$@
	options=c:ho:vV
	loptions=config:,help,output:,verbose,version
	
	config_path="con-test.conf"
	LOG_PATH="con-test_logs"
	
	! parsed=$(getopt --options=$options --longoptions=$loptions --name "$0" -- $args)
	if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
	    exit $FAILURE
	fi
	eval set -- "$parsed"

	while true; do
		case "$1" in
			-c | --config)
				config_path=$2
				shift 2
				;;
			-h | --help)
				call_help
				exit $SUCCESS
				;;
			-o | --output)
				LOG_PATH=$2
				shift 2
				;;
			-v | --verbose)
				VERBOSE=y
				shift
				;;
			-V | --version)
				print_version
				exit $SUCCESS
				;;
			--)
				shift
				break
				;;
			*)
				break
				;;
		esac
	done

	printf "${INFO} Starting conn-test script\n"
	printf "\t\tUsing ${config_path}\n"
	printf "\t\tUsing ${LOG_PATH}/\n"
	if [ ! -f "$config_path" ]; then
		printf "${ERROR} ${config_path} does not exist, or can not be accessed"
		exit $FAILURE
	fi
	source ${config_path}

	check_dependecies

	mkdir -p $LOG_PATH

	for i in $(seq 1 ${NR_RUNS}); do
		printf "${INFO} Starting test run $i with parameters:"
		printf " ${ATTENUATOR_PARAMS[${i} - 1]}\n"

		if [ -n "${UPDATE_PKG[${i} - 1]}" ]; then
			printf "${INFO} update package: ${UPDATE_PKG[${i} - 1]}"

			PARAMS=("$SERVER_USER" "$SERVER_IP" \
				"${UPDATE_PKG[$i - 1]}" "$SERVER_PASSWORD" \
				"$SERVER_CERTIFICATE")
			update_package $PARAMS
			unset $PARAMS

			PARAMS=("$CLIENT_USER" "$CLIENT_IP"
				"${UPDATE_PKG[${i} - 1]}" "$CLIENT_PASSWORD" \
				"$CLIENT_CERTIFICATE")
			update_package $PARAMS
			unset $PARAMS
		fi

		#start measurement
		start_iperf "$i" "$CLIENT"
		start_iperf "$i" "$SERVER"

		start_antennuator ${ATTENUATOR_PARAMS[${i} - 1]}
	done
}

main $@
